buildscript {
    repositories {
        mavenCentral()
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }

    dependencies {
        classpath 'gradle.plugin.gradle-plugins:jartest:1.0.1'			// necessary to depend tests on tests
    }
}

plugins {
    id 'de.aaschmid.cpd' version '1.0'	// cpd plugin
}

apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

eclipse {
	classpath {
		defaultOutputDir = file('build-eclipse')
	}
}

configurations {
	resultJar
}

dependencies {
	resultJar project(path: ':kieker-tools', configuration: 'resultJar')	// project(':kieker-tools').configurations.resultJar does not work
	resultJar 'org.jctools:jctools-core:2.1.0'
}

// We have multiple subprojects - but we do not want all of them in our JAR files.
def mainSubprojects = [project(':kieker-common'), project(':kieker-monitoring'), project(':kieker-analysis'), project(':kieker-tools')]

//def pmdAndCpdVersion = '5.0.5'	// works with 0 PMD errors and 0 PMD warnings
//def pmdAndCpdVersion = '5.1.3'	// causes many new PMD errors and PMD warnings
def pmdAndCpdVersion = '5.2.2'
//def pmdAndCpdVersion = '5.5.0'	// causes many new PMD errors and PMD warnings

// better use subprojects to avoid if-then-else in sourceSets
allprojects {
    version = kiekerVersion

    apply plugin: 'java'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    
    sourceSets {
        main {
            java {
            	if (project != rootProject) {
	                srcDir 'src'
					srcDir 'src-gen'
				}
            }
            resources {
                srcDir 'src-resources'
            }
        }
        test {
            java {
            	if (project != rootProject) {
	                srcDir 'test'
	                srcDir 'test-gen'
				}
            }
            resources {
                srcDir 'test-resources'
            }
        }
        integrationTest {
            java {
                srcDir 'test-integration'

                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
            }
        }
    }

    test {
        systemProperty "java.io.tmpdir", "${buildDir}"

        testLogging {
            showCauses = 'true'
            exceptionFormat = 'full'
            showExceptions = 'true'
            showStandardStreams = 'true'
        }

		afterTest { desc, result -> 
		    println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
		}
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    /*
     * This task should only be executed when updating to a
     * newer Gradle version. Note that manual changes to the
     * previous scripts will need to be merged to the new
     * wrapper script manually. Note that this tasks also
     * creates/updates the wrapper scripts in subdirectories.
     * */
    task wrapper(type: Wrapper) {
        description = 'Downloads the Gradle wrapper scripts.'
        gradleVersion = '3.3'
    }

    task integrationTest(type: Test) {
        testClassesDir = project.sourceSets.integrationTest.output.classesDir
        classpath = project.sourceSets.integrationTest.runtimeClasspath
    }
    check.dependsOn integrationTest

    test {
        ignoreFailures = false
	    maxHeapSize = "2g" // Set limit to prevent Travis-CI build to crash
    }

    apply plugin: 'pmd'
    pmd {
    	// the used PMD version should be the same version as the PMD Eclipse plugin (https://marketplace.eclipse.org/content/eclipse-pmd) uses
    	toolVersion = pmdAndCpdVersion
        ignoreFailures = true

        // Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
        ruleSets = []
        ruleSetFiles = files(resolveRelativeToParent(dirConfig, 'pmdrules.xml'))
    }

    apply plugin: 'checkstyle'
    checkstyle {
        ignoreFailures = true
        showViolations = false

        configFile = resolveRelativeToParent(dirConfig, 'cs-conf.xml')
    }

    def fbVersion = '3.0.1'
    apply plugin: 'findbugs'
    findbugs {	
        toolVersion = fbVersion
        ignoreFailures = true
        effort = "max"
        reportLevel = "low"

        excludeFilter = resolveRelativeToParent(dirConfig, 'fb-filter.xml')
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    // CS is a little bit weird, when it comes to dependencies.
    checkstyleTest.classpath += sourceSets.main.runtimeClasspath
    checkstyleMain.classpath += configurations.compile
    // This part makes sure that CS does not check the classes inside src-gen and test-gen
    checkstyleMain.source = 'src'
    checkstyleTest.source = 'test'
    
    repositories {
    	mavenCentral() 
    	jcenter() // for mockito
    }

    // Those are some dependencies which are needed by all subprojects
    dependencies {
        checkstyle resolveLibrary('**/checkstyle-*/**/*.jar')
        checkstyle project(':kieker-checkstyle-extension')

        findbugs resolveLibrary("**/findbugs-$fbVersion/lib/*.jar")
        
        // compile-time dependency due to the annotation SuppressFBWarnings()
        compile resolveLibrary("**/findbugs-$fbVersion/lib/*.jar")

		compile 'commons-logging:commons-logging:1.2'
		compile 'org.slf4j:slf4j-api:1.7.25'

		testCompile 'org.mockito:mockito-core:2.+'
        testCompile 'junit:junit:4.12'
		testCompile 'org.hamcrest:hamcrest-library:1.3'
    }

	check.dependsOn(':cpdCheck')
}

/*subprojects {
    plugins.withType(JavaBasePlugin) { // <- if 'JavaBasePlugin' plugin is not applied to all subprojects
        check.dependsOn(rootProject.cpdCheck)
    }
}*/

// gradle-cpd-plugin support only CPD 5.2.2 and above
// CPD works only within the main project, not within the subprojects as we have configured PMD etc.
cpd {
	toolVersion = pmdAndCpdVersion
	//excludeRoots =	// TODO exclude src-gen folders 
}
cpdCheck {
    // don't fail build if duplicates are found
    ignoreFailures = true
    // report as xml
    reports {
        text.enabled = false
        xml {
        	enabled = true
        	encoding = 'UTF-8'
        }
    }
    // only java, groovy and scala classes in 'main' sourceSets
    source = subprojects*.sourceSets*.main*.allJava
    //source = sourceSets.main.java
}

def parseCheckstyleReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'error'.each { issue ->
            switch (issue.attribute("severity")) {
                case "error":
                    errors++
                    break;
                case "warning":
                    warnings++
                    break;
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

def parseFindbugsReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'FindBugsSummary'.each { issue ->
            def prio1Bugs = issue.attribute("priority_1")
            def prio2Bugs = issue.attribute("priority_2")
            def bugsTotal = issue.attribute("total_bugs")
            def prio1BugsInt = 0
            def prio2BugsInt = 0
            def bugsTotalInt = 0

            if (prio1Bugs != null) {
                prio1BugsInt = Integer.valueOf(prio1Bugs)
            }

            if (prio2Bugs != null) {
                prio2BugsInt = Integer.valueOf(prio2Bugs)
            }

            if (bugsTotal != null) {
                bugsTotalInt = Integer.valueOf(bugsTotal)
            }

            errors += prio1BugsInt
            warnings += prio2BugsInt
            infos += bugsTotalInt - (prio1BugsInt + prio2BugsInt)
        }
    }
    return [errors, warnings, infos]
}

def parsePmdReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'file'.'violation'.each { issue ->

            // https://github.com/jenkinsci/pmd-plugin/blob/master/src/main/java/hudson/plugins/pmd/parser/PmdParser.java#L26-L29
            switch (issue.attribute("priority")) {
                case "1":
                case "2":
                    errors++
                    break;
                case "3":
                case "4":
                    warnings++;
                    break;
                case "5":
                default:
                    infos++
                    break;
            }
        }
    }
    return [errors, warnings, infos]
}

def parseCpdReport(File reportFile) {
    def errors = 0
    def warnings = 0
    def infos = 0

    if (reportFile.exists()) {
        def xmlFile = (new XmlParser()).parse(reportFile)
        xmlFile.'duplication'.each { issue ->
			errors++
        }
    } else {
    	println 'Could not find CPD report file at ' + reportFile
    }
    return [errors, warnings, infos]
}

task checkThresholds(dependsOn: mainSubprojects.tasks["build"]) {
  doLast {
    def reportTypes = ['main', 'test']

    // Begin Checkstyle report parsing
    def csErrors = 0
    def csWarnings = 0
    def csInfos = 0

    mainSubprojects.each { Project p ->
        reportTypes.each { String type ->
            def reportFile = file(p.projectDir.path + '/build/reports/checkstyle/' + type + '.xml')
            def reportResults = parseCheckstyleReport(reportFile)
            csErrors += reportResults[0]
            csWarnings += reportResults[1]
            csInfos += reportResults[2]
        }
    }
    // End Checkstyle report parsing


    // Begin Findbugs report parsing
    def fbErrors = 0
    def fbWarnings = 0
    def fbInfos = 0

    mainSubprojects.each { Project p ->
        reportTypes.each { String type ->
            def reportFile = file(p.projectDir.path + '/build/reports/findbugs/' + type + '.xml')
            def reportResults = parseFindbugsReport(reportFile)
            fbErrors += reportResults[0]
            fbWarnings += reportResults[1]
            fbInfos += reportResults[2]
        }
    }
    // End Findbugs report parsing


    // Begin PMD report parsing
    def pmdErrors = 0
    def pmdWarnings = 0
    def pmdInfos = 0

    mainSubprojects.each { Project p ->
        reportTypes.each { String type ->
            def reportFile = file(p.projectDir.path + '/build/reports/pmd/' + type + '.xml')
            def reportResults = parsePmdReport(reportFile)
            pmdErrors += reportResults[0]
            pmdWarnings += reportResults[1]
            pmdInfos += reportResults[2]
        }
    }
    // End PMD report parsing


    // Begin CPD report parsing
    def cpdErrors = 0

	def projects = [rootProject]
    projects.each { Project p ->
    	// cpd only produces one single file in the root project without any report types, such as main and test.
        def reportFile = file(p.projectDir.path + '/build/reports/cpd/cpdCheck.xml')
        def reportResults = parseCpdReport(reportFile)
        cpdErrors += reportResults[0]
    }
    // End CPD report parsing


    // Print results
    println("Static analysis results:")
    println()
    println(" Checkstyle:")
    println("  Errors: " + csErrors + " (Threshold: " + checkstyleErrorThreshold + ")")
    println("  Warnings: " + csWarnings + " (Threshold: " + checkstyleWarningThreshold + ")")
    println("  Info: " + csInfos)
    println()
    println(" Findbugs:")
    println("  Errors: " + fbErrors + " (Threshold: " + findbugsErrorThreshold + ")")
    println("  Warnings: " + fbWarnings + " (Threshold: " + findbugsWarningThreshold + ")")
    println("  Info: " + fbInfos)
    println()
    println(" PMD:")
    println("  Errors: " + pmdErrors + " (Threshold: " + pmdErrorThreshold + ")")
    println("  Warnings: " + pmdWarnings + " (Threshold: " + pmdWarningThreshold + ")")
    println("  Info: " + pmdInfos)
    println()
    println(" CPD:")
    println("  Errors: " + cpdErrors + " (Threshold: " + cpdErrorThreshold + ")")


    // Fail build if Checkstyle thresholds are violated
    if (csWarnings > Integer.valueOf(checkstyleWarningThreshold)) {
        throw new GradleException("There were checkstyle warnings exceeding the warning threshold! Warnings: " + csWarnings + " Threshold: " + checkstyleWarningThreshold)
    }

    if (csErrors > Integer.valueOf(checkstyleErrorThreshold)) {
        throw new GradleException("There were checkstyle errors exceeding the error threshold! Errors: " + csErrors + " Threshold: " + checkstyleErrorThreshold)
    }


    // Fail build if Findbugs thresholds are violated
    if (fbWarnings > Integer.valueOf(findbugsWarningThreshold)) {
        throw new GradleException("There were findbugs warnings exceeding the warning threshold! Warnings: " + fbWarnings + " Threshold: " + findbugsWarningThreshold)
    }

    if (fbErrors > Integer.valueOf(findbugsErrorThreshold)) {
        throw new GradleException("There were findbugs errors exceeding the error threshold! Errors: " + fbErrors + " Threshold: " + findbugsErrorThreshold)
    }

    // Fail build if PMD thresholds are violated
    if (pmdWarnings > Integer.valueOf(pmdWarningThreshold)) {
        throw new GradleException("There were pmd warnings exceeding the warning threshold! Warnings: " + pmdWarnings + " Threshold: " + pmdWarningThreshold)
    }

    if (pmdErrors > Integer.valueOf(pmdErrorThreshold)) {
        throw new GradleException("There were pmd errors exceeding the error threshold! Errors: " + pmdErrors + " Threshold: " + pmdErrorThreshold)
    }

	// Fail build if CPD thresholds are violated
    if (cpdErrors > Integer.valueOf(cpdErrorThreshold)) {
        throw new GradleException("There were cpd errors exceeding the error threshold! Errors: " + cpdErrors + " Threshold: " + cpdErrorThreshold)
    }
  }
}

// Execute 'checkThresholds' after all check tasks in the subprojects have been executed
mainSubprojects.tasks.check*.finalizedBy(checkThresholds)





task htmlQualityReport() {
    def javaVersion = JavaVersion.current()
    def reportTypes = ['main', 'test']
	def scautilJar = file("${rootDir}/${dirLib}/static-analysis/scautil-${javaVersion}.jar")

    mainSubprojects.each { Project p ->
        reportTypes.each { String type ->
            def reports = p.projectDir.path + '/build/reports'
            def checkstyleReportsFolder = "${reports}/checkstyle"
            def findbugsReportsFolder = "${reports}/findbugs"
            def pmdReportsFolder = "${reports}/pmd"

            doLast {
		p.javaexec {
			main = '-jar'
			args = ["$scautilJar", "${findbugsReportsFolder}/${type}.xml", "${checkstyleReportsFolder}/${type}.xml", "${pmdReportsFolder}/${type}.xml", "${reports}/${type}ReportSummary.html"]
		}
                println("The report summary for \'${type}\' can be found at ${reports}/${type}ReportSummary.html")
            }
        }
    }
}
mainSubprojects.tasks.check*.finalizedBy(htmlQualityReport)
htmlQualityReport.onlyIf { reportingCompatibleJavaVersionPresent() }





def regexpReplaceInFiles(File file, String searchExp, String replaceExp) {
    //println "Replacing $searchExp by $replaceExp in $file"
    String contents = file.getText('UTF-8')
    contents = contents.replaceAll(searchExp, replaceExp)
    file.write(contents, 'UTF-8')
}

task replaceHardCodedVersionNames() {
  doLast {
    regexpReplaceInFiles(project.file("bin/dev/release-check-short.sh"), "KIEKER_VERSION=\".*?\"", "KIEKER_VERSION=\"${version}\"")
  }
}

task updateLicenseHeaderYear() {
  doLast {
    FileTree tree = fileTree(dir: '.', include: '**/*.java')
    tree.each { File file ->
        regexpReplaceInFiles(file, 'Copyright 20\\d\\d Kieker Project', 'Copyright 2017 Kieker Project')
    }
  }
}

compileJava.dependsOn replaceHardCodedVersionNames

def reportingCompatibleJavaVersionPresent() {
    switch (JavaVersion.current()) {
        case JavaVersion.VERSION_1_7:
        case JavaVersion.VERSION_1_8:
            return true;
        default:
            println("Warning: Your current Java version ${JavaVersion.current()} is not compatible with the report generation tool.")
            return false;
    }
}

def resolveRelativeToParent(String directory, String file) {
    return rootProject.file(directory + '/' + file)
}

def resolveLibrary(String library) {
    def libraryDir = rootProject.file(dirLib)
    return fileTree(dir: libraryDir, include: library).filter { it.isFile() }
}

def today() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def year() {
    def date = new Date()
    def formattedDate = date.format('yyyy')
    return formattedDate
}

def monthMMM() {
    def date = new Date()
    def formattedDate = date.format('MMM')
    return formattedDate
}


task apidoc(type: Javadoc) {
    description = 'Generate the Javadoc API documentation for the Kieker Framework'

    source mainSubprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(mainSubprojects.collect { project -> project.sourceSets.main.compileClasspath })
    destinationDir = new File(projectDir, 'docs')

    title = "Kieker Monitoring and Analysis Framework, Vers. $kiekerVersion<br/>API Documentation"
    options.header = "Kieker $kiekerVersion"
    options.footer = "Kieker $kiekerVersion"
    options.bottom = "Copyright " + year() + " $kiekerCopyright, <a href=\"http://kieker-monitoring.net\">http://kieker-monitoring.net</a>"
    options.author = "true"
    options.version = "false"
    options.use = "true"
    options.tags = ["generated", "ordered", "model"]
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    options.docEncoding = "UTF-8"
}

ext.sharedManifest = manifest {
    attributes(
            "Specification-Title": kiekerName,
            "Specification-Version": kiekerVersion,
            "Specification-Vendor": kiekerCopyright,
            "Implementation-Title": kiekerName,
            "Implementation-Version": kiekerVersion + " (" + today() + ")",
            "Implementation-Vendor": kiekerCopyright,
            "kieker" // The section name
    )
}

def allArtifacts = {
    mainSubprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}

def licence = {
    from file('LICENSE')
}

def aopxml = {
    from(file('kieker-examples/aop.example.xml')) {
        into 'META-INF'
    }
}

// Remove the default 'jar' artifact because we have our own artifacts: mainJar, emfJar, aspectJJar
// If you don't do this, we get trouble with the Maven upload task having two Jars (default, mainJar)
// with the same type and classifier.
configurations.archives.artifacts.with { archives ->
    def jarArtifact
    archives.each {
        if (it.file =~ 'jar') {
            jarArtifact = it
        }
    }
    println "JAR to delete: ${jarArtifact}"
    remove(jarArtifact)
}

task mainJar(type: Jar, dependsOn: mainSubprojects.tasks["build"]) {
    // default archiveName is [baseName]-[appendix]-[version]-[classifier].[extension]
    configure allArtifacts
    configure licence
    configure aopxml

    from configurations.resultJar.collect { it.isDirectory() ? it : zipTree(it) }

    manifest = project.manifest {
        from sharedManifest
    }
}

task emfJar(type: Jar, dependsOn: mainSubprojects.tasks["build"]) {
    // default archiveName is [baseName]-[appendix]-[version]-[classifier].[extension]
    classifier = 'emf'
    configure allArtifacts
    configure licence
    configure aopxml

    from('lib') {
        include "org.eclipse.emf.common_${libEmfVersion}.LICENSE"
        include "org.eclipse.emf.ecore_${libEmfVersion}.LICENSE"
        include "org.eclipse.emf.ecore.xmi_${libEmfVersion}.LICENSE"
    }

	from configurations.resultJar.collect { it.isDirectory() ? it : zipTree(it) }

    def emfJarsTree = fileTree(dir: 'lib', include: '*emf*.jar').collect {
        zipTree(it)
    }
    from(emfJarsTree) {
        exclude "META-INF/*.RSA"
        exclude "META-INF/*.SF"
        exclude "META-INF/eclipse.inf"
        exclude "META-INF/*.DSA"
        exclude "plugin.*"
        exclude "about.*"
        exclude "modeling32.png"
    }

    manifest = project.manifest {
        from sharedManifest
    }
}

task aspectJJar(type: Jar, dependsOn: mainSubprojects.tasks["build"]) {
    // default archiveName is [baseName]-[appendix]-[version]-[classifier].[extension]
    classifier = 'aspectj'
    configure allArtifacts
    configure licence
    configure aopxml

    from fileTree(dir: 'lib', include: 'aspectjweaver-*.jar').collect {
        zipTree(it)
    }
    from file("lib/aspectjweaver-${libAspectjVersion}.LICENSE")

    from configurations.resultJar.collect { it.isDirectory() ? it : zipTree(it) }

    manifest = project.manifest {
        from sharedManifest
        attributes(
                "Can-Redefine-Classes": 'true',
                "Premain-Class": 'kieker.monitoring.probe.aspectj.AspectJLoader'
        )
        attributes(
                "Specification-Title": "AspectJ Weaver Classes",
                "Specification-Version": libAspectjVersion,
                "Specification-Vendor": "aspectj.org",
                "Implementation-Title": "org.aspectj.weaver",
                "Implementation-Version": libAspectjVersion,
                "Implementation-Vendor": "aspectj.org",
                "Can-Redefine-Classes": "true",
                "Premain-Class": "org.aspectj.weaver.loadtime.Agent",
                "org/aspectj/weaver/" // The section name
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from mainSubprojects.collect { project -> project.sourceSets.main.allJava }
}

task javadocJar(type: Jar, dependsOn: apidoc) {
    classifier = 'javadoc'
    from apidoc.destinationDir
}

artifacts {
    archives mainJar
    archives emfJar
    archives aspectJJar

    archives sourcesJar
    archives javadocJar
}

task distribute(group: 'distribution', description: 'Distributes binary and source archives.',
        dependsOn: [':distributeBinaryZip', ':distributeSourceZip', ':distributeBinaryTar', ':distributeSourceTar', ':replaceHardCodedVersionNames'])

def binaryContent = project.copySpec {
    from(projectDir) {
        include 'LICENSE'
        include 'HISTORY'

        include 'bin/**'
        include 'lib/**'
        include 'javadoc/**'
        include 'build/libs/*'

        exclude '**/.gradle/**'
        exclude 'lib/static-analysis/'
        exclude 'bin/dev/release-check*'
    }
    from('kieker-documentation') {
        include 'README-bin'
        rename 'README-bin', 'README'
    }
    exclude '**/*.log'
    into kiekerPackagenamebase + "-" + kiekerVersion
}

def manualContent = project.copySpec {
    from('kieker-documentation/userguide') {
        include 'kieker-userguide.pdf'
        rename 'kieker-userguide.pdf', "kieker-${kiekerVersion}-userguide.pdf"
    }
    into kiekerPackagenamebase + "-" + kiekerVersion + "/doc"
}

def exampleContent = project.copySpec {
    
    from('kieker-examples') {
        include '**'

        exclude '**/JavaEEServletContainerExample/build.xml'
        exclude '**/livedemo-source/**'
        exclude '**/.gradle/**'
        exclude '**/build/**'
        exclude '*gradle*'
        exclude '**/*.log'
    }

    from('kieker-monitoring/src-resources/META-INF') {
        include 'kieker.monitoring.default.properties'
        rename 'kieker.monitoring.default.properties', 'kieker.monitoring.example.properties'
    }
    into kiekerPackagenamebase + "-" + kiekerVersion + "/examples"

    with {
        from('kieker-examples') {
            include '**/build/libs/**'
        }
        includeEmptyDirs = false
    }
}

def exampleJavaEEContent = project.copySpec {
    from('kieker-monitoring/src-resources/META-INF') {
        include 'kieker.monitoring.default.properties'
        rename 'kieker.monitoring.default.properties', 'kieker.monitoring.properties'
    }
    into kiekerPackagenamebase + "-" + kiekerVersion + "/examples/JavaEEServletContainerExample/jetty"
}

task prepareExamplesForDistribution(dependsOn: ['kieker-examples:buildStandaloneExamples']) {
  doLast {
  }
}

task distributeBinaryZip(type: Zip, group: 'distribution', description: 'Distributes binary archive.', dependsOn: [mainJar, emfJar, aspectJJar, sourcesJar, javadocJar, 'kieker-documentation:userguide:buildDocumentation', prepareExamplesForDistribution]) {
    classifier = 'binaries'
    with binaryContent, manualContent, exampleContent, exampleJavaEEContent
}

task distributeBinaryTar(type: Tar, group: 'distribution', description: 'Distributes binary archive.', dependsOn: [mainJar, emfJar, aspectJJar, sourcesJar, javadocJar, 'kieker-documentation:userguide:buildDocumentation', prepareExamplesForDistribution]) {
    classifier = 'binaries'
    with binaryContent, manualContent, exampleContent, exampleJavaEEContent

    compression = Compression.GZIP
    extension = 'tar.gz'
}

def sourceContent = project.copySpec {
    from(projectDir) {
        include '**/**' // '*' doesn't seem to include hidden files
        include 'bin/**'
        include 'src/**'
        include 'lib/**'

        exclude 'README'
        exclude 'javadoc/**'
        exclude 'kieker-examples/analysis/**/.classpath'
        exclude 'kieker-examples/monitoring/**/.classpath'
        exclude 'kieker-examples/userguide/**/.classpath'
        exclude 'kieker-examples/analysis/**/.settings'
        exclude 'kieker-examples/monitoring/**/.settings'
        exclude 'kieker-examples/userguide/**/.settings'
        exclude '**/build/**'
        exclude 'build-eclipse/'
        exclude '**/.gradle/**'
        exclude '**/*.log'
        // Exclude all JAR-files in the 'kieker-examples' folder except for the opencsv JAR and the JARs in the JavaEEServletContainerExample directory
	exclude {
	  jars -> jars.file.path.contains('kieker-examples') &&
		  jars.file.name.endsWith('.jar') &&
		  !jars.file.name.startsWith('opencsv-') &&
		  !jars.file.path.contains('JavaEEServletContainerExample')
	  }
    }
    from('kieker-documentation') {
        include 'README-src'
        rename 'README-src', 'README'
    }
    into kiekerPackagenamebase + "-" + kiekerVersion
}

task checkReleaseArchivesShort(type: Exec, dependsOn: [distribute]) {
    commandLine 'bin/dev/release-check-short.sh'
}

task checkReleaseArchives(type: Exec, dependsOn: [checkReleaseArchivesShort]) {
    commandLine 'bin/dev/release-check-extended.sh'
}

task distributeSourceZip(type: Zip, group: 'distribution', dependsOn: [mainJar, emfJar, aspectJJar]) {
    description = 'Distributes source archive.'
    classifier = 'sources'
    with sourceContent
}

task distributeSourceTar(type: Tar, group: 'distribution', dependsOn: [mainJar, emfJar, aspectJJar]) {
    description = 'Distributes source archive.'
    classifier = 'sources'
    with sourceContent

    compression = Compression.GZIP
    extension = 'tar.gz'
}

task startRServe() {
  doLast {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        'bin/dev/rserve-control.bat start'.execute()
    } else {
        'bin/dev/rserve-control.sh start'.execute()
    }
  }
}
distribute.mustRunAfter startRServe

task stopRServe(type: Exec) {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        commandLine 'bin/dev/rserve-control.bat', 'stop'
    } else {
        commandLine 'bin/dev/rserve-control.sh', 'stop'
    }
    ignoreExitValue = true
}
startRServe.finalizedBy stopRServe
stopRServe.mustRunAfter distribute

task enableRTests() {
  doLast {
    tasks.withType(Test) {
        systemProperties['TestKiekerRTests'] = 'true'
    }
  }
}
distribute.mustRunAfter enableRTests

task jenkinsBuild(dependsOn: [mainJar, emfJar, aspectJJar]) {
    description = 'Builds and tests the JAR files of the Kieker Framework'
}

task jenkinsNightlyBuild(dependsOn: [startRServe, enableRTests, distribute, checkReleaseArchives]) {
    description = 'Builds and tests the release of the Kieker Framework'
}

// For signing, the following properties (e.g., provided in ~/.gradle/gradle.properties) are needed
//signing.keyId=8E97E26A
//signing.password=XXX
//signing.secretKeyRingFile=/home/USER/.gnupg/secring.gpg
//

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

project.ext {
    // for local tests:
    //releaseRepoUrl = "file://localhost/tmp/myRepo/releases"
    //snapshotRepoUrl = "file://localhost/tmp/myRepo/snapshots"

    // Maven central:
    releaseRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.artifactId = 'kieker'
            pom.groupId = 'net.kieker-monitoring'

            pom.project {
                parent {
                    groupId = 'org.sonatype.oss'
                    artifactId = 'oss-parent'
                    version = '7'
                }

                packaging = 'jar'
                name = 'Kieker Monitoring and Analysis Framework'
                description = 'Kieker: Application Performance Monitoring and Dynamic Software Analysis'
                url = 'http://kieker-monitoring.net'
                inceptionYear = '2006'

                organization {
                    name = 'Kieker Project'
                    url = 'http://kieker-monitoring.net'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'thomas.duellmann'
                        name = 'Thomas F. Duellmann'
                        email = 'duellmann@informatik.uni-stuttgart.de'
                    }
                    developer {
                        id = 'andre.van.hoorn'
                        name = 'Andre van Hoorn'
                        email = 'van.hoorn@informatik.uni-stuttgart.de'
                    }
                    developer {
                        id = 'reiner.jung'
                        name = 'Reiner Jung'
                        email = 'reiner.jung@email.uni-kiel.de'
                    }
                    developer {
                        id = 'christian.wulf'
                        name = 'Christian Wulf'
                        email = 'christian.wulf@email.uni-kiel.de'
                    }
                }

                mailingLists {
                    mailingList {
                        name = 'Kieker-developers'
                        subscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-developers'
                        unsubscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-developers'
                        post = 'kieker-developers@lists.sourceforge.net'
                        archive = 'http://sourceforge.net/mailarchive/forum.php?forum_name=kieker-developers'
                    }
                    mailingList {
                        name = 'Kieker-tickets'
                        subscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-tickets'
                        unsubscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-tickets'
                        post = 'kieker-tickets@lists.sourceforge.net'
                        archive = 'http://sourceforge.net/mailarchive/forum.php?forum_name=kieker-tickets'
                    }
                    mailingList {
                        name = 'Kieker-users'
                        subscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-users'
                        unsubscribe = 'https://lists.sourceforge.net/lists/listinfo/kieker-users'
                        post = 'kieker-users@lists.sourceforge.net'
                        archive = 'http://sourceforge.net/mailarchive/forum.php?forum_name=kieker-users'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/kieker-monitoring/kieker.git'
                    developerConnection 'scm:git:git@github.com:kieker-monitoring/kieker.git'
                    url = 'https://github.com/kieker-monitoring/kieker'
                }

                issueManagement {
                    system = 'Jira'
                    url = 'https://kieker-monitoring.atlassian.net/'
                }

                ciManagement {
                    system = 'Jenkins'
                    url = 'https://build.se.informatik.uni-kiel.de/jenkins/job/kieker-monitoring/'
                }
            }

            // The following properties should be defined in ~/.gradle/gradle.properties (neede only for Maven upload)
            def mavenUser = "NoMavenUser"
            if (System.env.kiekerMavenUser != null) {
                mavenUser = System.env.kiekerMavenUser 
            }
            
	    def mavenPassword = "NoMavenPassword"
            if (System.env.kiekerMavenPassword != null) {
                mavenPassword = System.env.kiekerMavenPassword
            }

	    repository(url: project.releaseRepoUrl) {
                authentication(userName: mavenUser, password: mavenPassword)
            }
            snapshotRepository(url: project.snapshotRepoUrl) {
                authentication(userName: mavenUser, password: mavenPassword)
            }
        }
    }
}
