buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.freefair.gradle:aspectj-plugin:5.3.0"
  }
}

plugins {
	id 'java'
	id 'java-library'
	id "com.github.hauner.jarTest"
}

// TODO Why must this be applied, while others get included via plugins?
apply plugin: "io.freefair.aspectj.post-compile-weaving"

repositories {
    mavenCentral()
}

configurations {
    ajc
    aspects
    aspectCompile
    compile{
	extendsFrom aspects
    }
}

repositories {
	jcenter()
	maven { url "https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito2" }
}

dependencies {
	implementation project(':kieker-common')

	implementation "com.rabbitmq:amqp-client:$libAmqpVersion"

	implementation "org.jctools:jctools-core:$libJctoolsVersion"
	
	ajc "org.aspectj:aspectjtools:$aspectjVersion"
	implementation "org.aspectj:aspectjrt:$aspectjVersion"
	implementation "org.aspectj:aspectjweaver:$aspectjVersion"	// for our custom AspectJ weaver (class: AspectJLoader)

	implementation 'com.github.oshi:oshi-core:3.12.2'

	// disl not available via maven
	implementation resolveLibrary('disl-2.0/disl-server.jar')
	
	implementation "org.tukaani:xz:$libXzVersion"	// compression algorithms used by the file writers

	implementation "org.apache.cxf:cxf-bundle-minimal:$libCxfVersion"
	implementation 'org.apache.commons:commons-compress:1.20'
		
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-server
	implementation 'org.glassfish.jersey.core:jersey-server:3.0.2'
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-common
	implementation 'org.glassfish.jersey.core:jersey-common:3.0.2'
	// https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
	implementation 'org.glassfish.jersey.core:jersey-client:3.0.2'
	
	// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	// https://mvnrepository.com/artifact/javax.jms/javax.jms-api
	implementation 'javax.jms:javax.jms-api:2.0.1'

	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
	implementation 'javax.jws:javax.jws-api:1.1'
	
	// https://mvnrepository.com/artifact/aopalliance/aopalliance
	implementation 'aopalliance:aopalliance:1.0'
	// https://mvnrepository.com/artifact/org.springframework
	implementation "org.springframework:spring-beans:$springVersion"
	implementation "org.springframework:spring-context:$springVersion"
	implementation "org.springframework:spring-core:$springVersion"
	implementation "org.springframework:spring-web:$springVersion"
	implementation "org.springframework:spring-webmvc:$springVersion"
	
	// testing
	testImplementation "org.hamcrest:hamcrest:$libHamcrestVersion"

	testImplementation 'org.javassist:javassist:3.28.0-GA'

	testImplementation "junit:junit:$libJunitVersion"

	testImplementation 'org.objenesis:objenesis:3.2'
	
	testImplementation 'org.easymock:easymock:4.3'
	testImplementation "org.mockito:mockito-core:$libMockitoVersion"
	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'org.powermock:powermock-api-easymock:2.0.9' 
	testImplementation 'org.powermock:powermock-module-junit4:2.0.9' 
	testImplementation 'org.powermock:powermock-core:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9' 

	// this project depends on the tests of kieker-common, e.g., it requires the class AbstractKiekerTest
	testImplementation project (path: ':kieker-common', configuration: 'testArchives')
	testImplementation "org.springframework:spring-beans:$springVersion"
	testImplementation "org.springframework:spring-expression:3.$springVersion"

	testImplementation 'org.eclipse.jetty:jetty-server:9.4.28.v20200408'
	testImplementation 'org.eclipse.jetty:jetty-webapp:9.4.28.v20200408'
	testImplementation 'org.eclipse.jetty:apache-jsp:9.4.28.v20200408'
	
	testImplementation 'commons-io:commons-io:2.8.0'
	
	testImplementation project(':kieker-common').sourceSets.test.output
		
	integrationTestCompile "junit:junit:$libJunitVersion"
}

task iajc(dependsOn: classes) {
    doLast {
	ant.taskdef(
		resource: 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties',
	    classpath: configurations.ajc.asPath
	)
	ant.iajc(
		XlintFile: 'aspectjXlint.properties', 
		X: 'joinpoints:synchronization', 
		source: sourceCompatibility, 
		target: targetCompatibility, 
		debug: 'true', 
		destdir: sourceSets.main.output.classesDir) {

		classpath {
			pathElement(location: configurations.compile.asPath)
			pathElement(location: sourceSets.main.output.classesDir)
		}

	    sourceroots {
		pathElement(location: 'src/kieker/monitoring/probe/aspectj')
	    }
	   
	}
    }   
}

sourceSets {
    jarIntegrationTest {
	compileClasspath += sourceSets.main.output
	runtimeClasspath += sourceSets.main.output
	
	compileClasspath += sourceSets.test.output
	runtimeClasspath += sourceSets.test.output
	
	java {
		srcDirs = [ 'integrationTest' ]
	}
    }
}

configurations {
    jarIntegrationTestImplementation.extendsFrom testImplementation
    jarIntegrationTestRuntimeOnly.extendsFrom runtimeOnly
}

task jarIntegrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.jarIntegrationTest.output.classesDirs
    classpath = sourceSets.jarIntegrationTest.runtimeClasspath
    dependsOn rootProject.aspectJJar
}



//compileJava.doLast {
//    tasks.iajc.execute()
//}
