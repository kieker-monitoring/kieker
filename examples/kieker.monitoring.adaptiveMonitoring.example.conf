# A comment line starts with #, a pattern line starts with + or -, an empty line will be ignored
# and any other line produces a warning but does not affect the execution.
# + PATTERN , includes the probes matching the given pattern 'PATTERN'
# - PATTERN , excludes the probes matching the given pattern 'PATTERN'

# Pattern syntax used for adaptive monitoring of operations:
#
# PATTERN = MODIFIER_CONSTRAINT_LIST RETURN_TYPE WS FQ_TYPE "." METHOD_NAME [WS] "(" [WS] [PARAM_LIST] [WS] ")" [THROWS_PATTERN] [WS]
#
# WS = any whitespace
# MODIFIER_CONSTRAINT_LIST = (("public" | "private" | "package" | "protected")WS)?(("abstract" | "non_abstract")WS)?
#  (("static" | "non_static")WS)?(("final" | "non_final")WS)?(("synchronized" | "non_synchronized")WS)?(("native" | "non_native")WS)?
# RETURN_TYPE = FQ_TYPE | "new"
# FQ_TYPE = [FQ_PACKAGE_PREFIX] IDENTIFIER
# FQ_PACKAGE_PREFIX = [".."] [IDENTIFER "." (["."] IDENTIFIER ".")* ["."]]
# IDENTIFIER = (alpha|"*")(alpha|num|"*")*
# PARAM_LIST = (".." | FQ_TYPE) ([WS] "," [WS] (".." | FQ_TYPE))*
# METHOD_NAME = IDENTIFIER
# THROWS_PATTERN = WS "throws" WS PARAMLIST
#
# Hints:
# - Use 'new' as RETURN_TYPE to hit constructors, '*' in IDENTIFIER to hit any number of JavaIdentifiers, 
#   '..' in FQ_TYPE to hit any nested packages and '..' in PARAM_LIST to hit anything.
# - Not all keywords are supported by all probes, e.g., AspectJ-based probes do not support abstract, final, throws.
#   For these probes, these keywords should not be used in patterns because they will never match.

# Examples:
# + *
#     Includes everything, special case, not conform with syntax
#     '+ *' is a default on the top of the list, so it's not necessary here.
# + ..* ..*.*(..) throws ..
#     Includes everything too, but now in correct pattern syntax
# - public java.util.List package.subpackage.AnyClass.any*()
#     Excludes all public methods in package.subpackage.AnyClass that start with any, have no parameters, 
#     throw no exceptions and its return type is java.util.List.
# + non_static non-native ..* ..*.*(..) throws IOException
#     Includes all methods that are not static and not native and throw an IOException.
# - ..* ..*.*(..String, .. , int) throws ..
#     Excludes all methods with two or more parameters where the first parameter is a string and the last is an int.

# It is also possible to activate or deactivate CPU and memory records.
#
# Pattern syntax used for adaptive monitoring of CPUUtilizationRecords and ResourceUtilizationRecords:
#
# PATTERN = %CPU::ID
#
# ID = the id of the cpu | a regular expression
#
# Examples: 
# -%CPU::0 
#     Excludes records from cpu with id 0 
# -%CPU::.*
#     Excludes records from all cpus
# -%CPU::[0-2]
#     Excludes records from cpus with id 0, 1 and 2
#
# Special case:
# -%CPU 
#     This deactivates monitoring of CPU records without the ability to enable individuals.
#     Therefore the performance improves compared to -%CPU::.*


# Pattern syntax used for adaptive monitoring of MemSwapUsageRecords:
#
# PATTERN = %MEMSWAP
#
# Example: 
# -%MEMSWAP
#     Excludes the MemSwapUsageRecords

# A probe can match multiple patterns. The comparison begins with the last pattern, and ends with the first hit, whether include or exclude.
