plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'maven-publish'
}

sourceCompatibility = 11
targetCompatibility = 11

// The following lines are necessay to create a test jar
project.configurations {
	testArchives.extendsFrom (testCompile)
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':common')
	implementation project(':monitoring')
	implementation project(':monitoring-probe-bytebuddy')
	implementation project(':monitoring-probe-javassist')
	
	implementation "org.aspectj:aspectjtools:$aspectjVersion" // Only required for compile-time weaving
	
	implementation 'net.bytebuddy:byte-buddy:1.14.11'
	implementation 'org.javassist:javassist:3.30.2-GA'
	
	implementation 'commons-io:commons-io:2.15.1'
}


def resolveLibrary(String library) {
def libraryDir = rootProject.file(dirLib)
return fileTree(dir: libraryDir, include: library).filter { it.isFile() }
}

jar {
    dependsOn(":common:jar")
    dependsOn(":monitoring:jar")
    dependsOn(":monitoring-probe-bytebuddy:jar")
    dependsOn(":monitoring-probe-javassist:jar")
    
    manifest {
        attributes 'Main-Class': 'kiekerX.StupidMain'
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    exclude 'META-INF/ECLIPSEF.SF'
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// This is necessary to avoid eclipse problems; eclipse does not allow the same project to be imported twice as dependency
eclipse {
	classpath {
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry ->
					entry instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency
						&& entry.path == '/common'
						&& entry.entryAttributes['test']
				}
			}
		}
	}
}
