apply plugin: 'eclipse'

dependencies {
	compile project(':kieker-common')
	compile project(':kieker-analysis')
	compile project(':kieker-monitoring')

	compile resolveLibrary('commons-cli-*.jar')
	compile resolveLibrary('jgraphx-*.jar')
	compile resolveLibrary('commons-math3-*.jar')
	compile resolveLibrary('commons-lang3-*.jar')
	compile resolveLibrary('Rsession-*.jar')
	compile resolveLibrary('Rserve-*.jar')
	compile resolveLibrary('REngine-*.jar')
	compile resolveLibrary('reflections-*.jar')
	compile resolveLibrary('activemq-core-*.jar')
	//compile group: 'org.eclipse.jetty',	name: 'jetty-server', version: '8.1.16.v20140903'
	
	// Some dependencies for the HTTP connector of the KDB
	compile fileTree(dir: 'lib/jetty', include: 'jetty-*.jar')
	
	// this project depends on the tests of kieker-common, e.g., it requires the class AbstractKiekerTest
	testCompile project (path: ':kieker-common', configuration: 'testArchives')
	// this project depends on the tests of kieker-analysis, e.g., it requires the class BookstoreEventRecordFactory
	testCompile project (path: ':kieker-analysis', configuration: 'testArchives')
	// this project depends on the tests of kieker-analysis, e.g., it requires the class NamedListWriter
	testCompile project (path: ':kieker-monitoring', configuration: 'testArchives')

	testRuntime resolveLibrary('derby-*.jar')
	testRuntime resolveLibrary('geronimo-j2ee-management_1.1_spec-*.jar')
	testRuntime resolveLibrary('kahadb-*.jar')
	testRuntime fileTree(dir: rootProject.file('kieker-examples/JavaEEServletContainerExample/jetty/lib'), include: 'jetty-*.jar')
}

eclipse {
	classpath {
		defaultOutputDir = file('build-eclipse')
	}
}

task replaceHardCodedVersionNames() {
  doLast {
	regexpReplaceInFiles(project.file("test/kieker/test/tools/manual/TestTCPReader.java"), "kieker-.*-aspectj.jar", "${rootProject.aspectJJar.archiveName}")
  }
}

compileJava.dependsOn replaceHardCodedVersionNames

task generateRecords(type: JavaExec) {
  description 'Generates the sources for the Kieker records using the IRL model specification'

  classpath = fileTree('../bin/dev') {
    include 'target/de.cau.cs.se.instrumentation.rl.cli-*.jar'
    include 'lib/org.eclipse.emf.mwe.core_*.jar'
    include 'lib/org.eclipse.xtext.common.types_*.jar'
    include 'lib/org.eclipse.emf.mwe.utils_*.jar'
    include 'lib/org.eclipse.xtext.common.types.ui_*.jar'
  }				
  main = 'de.cau.cs.se.instrumentation.rl.cli.CLICompilerMain'
  args '-r', '..',            // the root directory
       '-a', 'Kieker Build',
       '-d', 'src-gen',       // the destination directory
       '-s', 'model/records', // the source directory
       '-l', 'java',          // generate the records
       '-l', 'java.factory',  // generate the record factories
       '-n', 'kieker-tools',
       '-p', 'kieker-tools',
       '-v', '1.10'	          // generate code for Kieker 1.10
}

task generateRecordTests(type: JavaExec) {
  description 'Generates the sources for the Kieker records tests using the IRL model specification'

  classpath = fileTree('../bin/dev') {
    include 'target/de.cau.cs.se.instrumentation.rl.cli-*.jar'
    include 'lib/org.eclipse.emf.mwe.core_*.jar'
    include 'lib/org.eclipse.xtext.common.types_*.jar'
    include 'lib/org.eclipse.emf.mwe.utils_*.jar'
    include 'lib/org.eclipse.xtext.common.types.ui_*.jar'
  }				
  main = 'de.cau.cs.se.instrumentation.rl.cli.CLICompilerMain'
  args '-r', '..',            // the root directory
       '-a', 'Kieker Build',
       '-d', 'test-gen',       // the destination directory
       '-s', 'model/records', // the source directory
       '-l', 'java.junit',          // generate the records
       '-n', 'kieker-tools',
       '-p', 'kieker-tools',
       '-v', '1.10'	          // generate code for Kieker 1.10
}
